{"version":3,"sources":["api/index.js","App.js","serviceWorker.js","index.js"],"names":["socket","WebSocket","App","props","state","chatHistory","message","callBack","msg","console","log","setState","onopen","onmessage","onclose","ev","onerror","error","this","send","inRow","className","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","onClick","sendHello","scope","map","index","data","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"2RAAMA,G,YAAS,IAAIC,UAAU,2BCyGdC,E,kDAhGb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CAACC,YAAa,GAAIC,QAAS,SAFvB,E,gEAKE,IDZTC,ECYQ,ODZRA,ECaF,SAAAC,GACNC,QAAQC,IAAI,yBACZ,EAAKC,SAAS,CAACN,YAAY,GAAD,mBAAM,EAAKD,MAAMC,aAAjB,CAA8BG,MACxDC,QAAQC,IAAI,EAAKN,QDfrBK,QAAQC,IAAI,iBAEZV,EAAOY,OAAS,WACdH,QAAQC,IAAI,2BAEdV,EAAOa,UAAY,SAAAL,GACjBC,QAAQC,IAAI,YAAaF,GACzBD,EAASC,IAEXR,EAAOc,QAAU,SAAAC,GACfN,QAAQC,IAAI,4BAA6BK,IAE3Cf,EAAOgB,QAAU,SAAAC,GACfR,QAAQC,IAAI,iBAAkBO,M,kCAIpB,IAAAT,ECGVC,QAAQC,IAAIQ,KAAKd,MAAME,SDHbE,ECIFU,KAAKd,MAAME,QDHrBG,QAAQC,IAAI,oBAAqBF,GACjCR,EAAOmB,KAAKX,K,+BCKF,IAAD,SACwBU,KAAKd,MAA7BE,EADA,EACAA,QAASD,EADT,EACSA,YACZe,GAAQ,EACZ,OACI,6BACE,yBAAKC,UAAU,iDACb,uBAAGA,UAAU,eAAeC,KAAK,KAAjC,YACA,4BAAQD,UAAU,iBAAiBE,KAAK,SAASC,cAAY,WAAWC,cAAY,iBAC5EC,gBAAc,gBAAgBC,gBAAc,QAAQC,aAAW,sBAIvE,yBAAKP,UAAU,2BAA2BQ,GAAG,iBAC3C,wBAAIR,UAAU,sBACZ,wBAAIA,UAAU,mBACZ,uBAAGA,UAAU,WAAWC,KAAK,KAA7B,QAAsC,0BAAMD,UAAU,WAAhB,eAExC,wBAAIA,UAAU,YACZ,uBAAGA,UAAU,WAAWC,KAAK,KAA7B,aAEF,wBAAID,UAAU,YACZ,uBAAGA,UAAU,WAAWC,KAAK,KAA7B,YAEF,wBAAID,UAAU,YACZ,uBAAGA,UAAU,WAAWC,KAAK,KAA7B,aAKR,yBAAKD,UAAU,OACb,4BAAQE,KAAK,SAASF,UAAU,2BACxBS,QAAS,kBAAM,EAAKC,cAD5B,cAIF,yBAAKV,UAAU,iBACb,iCACE,4CACA,yBAAKA,UAAU,gBACb,2BAAOA,UAAU,qBACf,+BACA,4BACE,wBAAIW,MAAM,OAAV,8BACA,wBAAIA,MAAM,OAAV,oCAGF,+BACC3B,EAAY4B,KAAI,SAACzB,EAAK0B,GACrB,OAAId,GACFA,GAAQ,EAEJ,4BACE,4BAAKd,GACL,4BAAKE,EAAI2B,SAIff,GAAQ,EAEJ,wBAAIC,UAAU,cACZ,4BAAKf,GACL,4BAAKE,EAAI2B,qB,GA/EnBC,IAAMC,WCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDwHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAArC,GACLR,QAAQQ,MAAMA,EAAMX,c","file":"static/js/main.6d477ff7.chunk.js","sourcesContent":["const socket = new WebSocket(\"ws://localhost:8085/ws\");\r\n\r\nlet connect = callBack => {\r\n  console.log(\"Connecting...\");\r\n\r\n  socket.onopen = () => {\r\n    console.log(\"Successfully Connected\");\r\n  };\r\n  socket.onmessage = msg => {\r\n    console.log(\"onmessage\", msg);\r\n    callBack(msg);\r\n  };\r\n  socket.onclose = ev => {\r\n    console.log(\"Socket Closed Connection \", ev);\r\n  };\r\n  socket.onerror = error => {\r\n    console.log(\"Socket Error: \", error);\r\n  }\r\n};\r\n\r\nlet sendMsg = msg => {\r\n  console.log('sending message: ', msg);\r\n  socket.send(msg);\r\n};\r\n\r\nexport {connect, sendMsg}","import React from 'react';\nimport './flatly.css';\nimport './App.css'\nimport {connect, sendMsg} from \"./api\";\n\n// $b2:#F9FAFA;\n// $b3:#FFFBEB;\n// $b4:#947205;\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {chatHistory: [], message: \"Hello\"}\n  }\n\n  componentDidMount() {\n    connect(msg => {\n      console.log(\"A new Message is sent\");\n      this.setState({chatHistory: [...this.state.chatHistory, msg]});\n      console.log(this.state)\n    });\n  }\n\n  sendHello() {\n    console.log(this.state.message);\n    sendMsg(this.state.message);\n  }\n\n  render() {\n    const {message, chatHistory} = this.state;\n    let inRow = true;\n    return (\n        <div>\n          <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n            <a className=\"navbar-brand\" href=\"#\">Chat App</a>\n            <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarColor03\"\n                    aria-controls=\"navbarColor03\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n              {/*<span className=\"navbar-toggler-icon\"></span>*/}\n            </button>\n\n            <div className=\"collapse navbar-collapse\" id=\"navbarColor03\">\n              <ul className=\"navbar-nav mr-auto\">\n                <li className=\"nav-item active\">\n                  <a className=\"nav-link\" href=\"#\">Home <span className=\"sr-only\">(current)</span></a>\n                </li>\n                <li className=\"nav-item\">\n                  <a className=\"nav-link\" href=\"#\">Features</a>\n                </li>\n                <li className=\"nav-item\">\n                  <a className=\"nav-link\" href=\"#\">Pricing</a>\n                </li>\n                <li className=\"nav-item\">\n                  <a className=\"nav-link\" href=\"#\">About</a>\n                </li>\n              </ul>\n            </div>\n          </nav>\n          <div className='m-3'>\n            <button type=\"button\" className=\"btn btn-secondary btn-lg\"\n                    onClick={() => this.sendHello()}>Say Hello\n            </button>\n          </div>\n          <div className='container m-3'>\n            <section>\n              <h1>Chat History</h1>\n              <div className='chat-history'>\n                <table className=\"table table-hover\">\n                  <thead>\n                  <tr>\n                    <th scope=\"col\">Message Sent to the Server</th>\n                    <th scope=\"col\">Message received by the Server</th>\n                  </tr>\n                  </thead>\n                  <tbody>\n                  {chatHistory.map((msg, index) => {\n                    if (inRow) {\n                      inRow = false;\n                      return (\n                          <tr>\n                            <td>{message}</td>\n                            <td>{msg.data}</td>\n                          </tr>\n                      )\n                    } else {\n                      inRow = true;\n                      return (\n                          <tr className=\"table-dark\">\n                            <td>{message}</td>\n                            <td>{msg.data}</td>\n                          </tr>\n                      )\n                    }\n                  })}\n                  </tbody>\n                </table>\n\n              </div>\n\n            </section>\n          </div>\n        </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}